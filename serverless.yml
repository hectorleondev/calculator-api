service: calculator-api
frameworkVersion: '3'

plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: dev
  environment:
    USER_TABLE:
      Ref: UserTable
    OPERATION_TABLE:
      Ref: OperationTable
    RECORD_TABLE:
      Ref: RecordTable
    LOGGER_SERVICE_NAME: ${self:service}-logger
    REGION: ${self:provider.region}
    USER_POOL_ID:
      Ref: AuthUsersPool
    USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: "*"

functions:
  create_user:
    handler: src.handlers.user_handler.create_user_handler
    events:
      - http:
          path: user
          method: post
          cors: true
  login_user:
    handler: src.handlers.user_handler.login_user_handler
    events:
      - http:
          path: login
          method: post
          cors: true
  update_user:
    handler: src.handlers.user_handler.update_user_handler
    events:
      - http:
          path: user/{user_id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                user_id: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: [ "AuthUsersPool", "Arn" ]
            claims: [ "email" ]
  delete_user:
    handler: src.handlers.user_handler.delete_user_handler
    events:
      - http:
          path: user/{user_id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                user_id: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: [ "AuthUsersPool", "Arn" ]
            claims: [ "email" ]
  create_operation:
    handler: src.handlers.operation_handler.create_operation_handler
    events:
      - http:
          path: operation
          method: post
          cors: true
  update_operation:
    handler: src.handlers.operation_handler.update_operation_handler
    events:
      - http:
          path: operation/{operation_id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                operation_id: true
  get_operation_list:
    handler: src.handlers.operation_handler.get_operation_list_handler
    events:
      - http:
          path: operation/list
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: ["AuthUsersPool", "Arn"]
            claims: ["email"]
  create_calculation:
    handler: src.handlers.calculation_handler.create_calculation_handler
    events:
      - http:
          path: calculation
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: [ "AuthUsersPool", "Arn" ]
            claims: [ "email" ]
  get_calculation:
    handler: src.handlers.calculation_handler.get_calculation_handler
    events:
      - http:
          path: calculation/{user_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                user_id: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: ["AuthUsersPool", "Arn"]
            claims: ["email"]
resources:
  Resources:
    AuthUsersPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        AutoVerifiedAttributes: ["email"]
        MfaConfiguration: "OFF"

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        CallbackURLs:
          - Fn::Sub: "https://fif5el1wvl.execute-api.us-east-1.amazonaws.com/dev/callback"
        ClientName: ${self:provider.stage}-user-pool-client
        GenerateSecret: false
        UserPoolId: {Ref: AuthUsersPool}
        AccessTokenValidity: 24
        IdTokenValidity: 24
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AllowedOAuthFlows:
          - implicit
          - code
        AllowedOAuthScopes:
          - openid
          - email
          - profile
        AllowedOAuthFlowsUserPoolClient: true

    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OperationTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: operation_id
            AttributeType: S
        KeySchema:
          - AttributeName: operation_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    RecordTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: record_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: record_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: user_index
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
